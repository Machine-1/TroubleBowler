
#include <stdio.h>
#include <cstring>
#include <string>
#include <queue>
#include <set>
using namespace std;

#define PAIR 6
#define MAX 2 * PAIR+1


int bfs(char start[], char goal[], set<string>visitedSet)
{
	queue<string> q;							//����
	string frontStr ;
	string result ;
											           
	int pushtime = 0;								//��Ӵ���
	int time = 0;									//��������
	int record = 0;									//��¼���Ӵ���
	int addition = 1;                             //����һ���Ժ������
	int c = 0;									//�����ֵ����
	int p = 0;									//����������������
	int i = 0;
	
	q.push(start);								//�Ƚ�start����,�����Ϊ�ѱ���
	visitedSet.insert(start);

	while (true)
	{
		frontStr = q.front();
		q.pop();
		record++;

		if ((frontStr == goal))					//�ж��Ƿ����
		{
			break;
		}

		c = frontStr.find('o');					//��ȡ������λ��,�����ַ������ҵ���o����λ��
		p = (c + PAIR) % (PAIR * 2);			//��ȡ���������Ե�λ��

		if (c % PAIR == 0)						//�����ߴ������ϻ�����	a	 b	c	d	e	f	
		{										//						o	 h	i	j	k	g
			for (i = 0; i < 2; i++)
			{
				swap(frontStr[c], frontStr[p + i]);				//�����ַ����е��ַ�

				result = frontStr;
				swap(frontStr[c], frontStr[p + i]);	//�ָ�ԭ��
													//���result ������set�У�˵�����Ѿ�����������
				if (visitedSet.count(result) == 0) //��״̬δ������ʱ
				{
					visitedSet.insert(result);  //���Ϊ�ѱ�����Ҳ���ǲ��뵽����֮��
					q.push(result);
					pushtime++;
				}
			}//���forѭ���Ժ󣬾ͱ��������һ��״̬�µķ�֧���������ǣ�������뵽������
		}

		else if (c % PAIR == PAIR-1)						//�����ߴ������ϻ����£�ֻ����2��Ͷ�����
		{
			for (i = -1; i < 1; i++)
			{
				swap(frontStr[c], frontStr[p + i]);

				result = frontStr;
				swap(frontStr[c], frontStr[p + i]);	//�ָ�ԭ��

				if (visitedSet.count(result) == 0) //��״̬δ������ʱ
				{
					visitedSet.insert(result);  //���Ϊ�ѱ���
					q.push(result);
					pushtime++;
				}
			}
		}

		else									//��3��Ͷ�����
			for (i = -1; i < 2; i++)
			{
				swap(frontStr[c], frontStr[p + i]);

				result = frontStr;
				swap(frontStr[c], frontStr[p + i]);	//�ָ�ԭ��

				if (visitedSet.count(result) == 0) //��״̬δ������ʱ
				{
					visitedSet.insert(result);  //���Ϊ�ѱ���
					q.push(result);
					pushtime++;
				}
			}


		if (record == addition)
		{
			addition = pushtime;
			pushtime = 0;
			record = 0;
			time++;
		}
		
	}
	
	return time;
}

int main(void)
{
	set<string> visitedSet;			//set���������ѷ��ʹ���״̬
	char start[MAX] = "abcdefghijko";
	char goal[MAX] = "obcdefghijka";

	int answer = bfs(start, goal , visitedSet);
	printf("%d", answer);
	return 0;
}
